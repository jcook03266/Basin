// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FBSDKLoginKit
import FBSDKCoreKit
@_exported import FBSDKLoginKit
import Foundation
import Swift
import UIKit
import _Concurrency
extension FBSDKLoginKit.FBLoginButton {
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreGraphics.CGRect = .zero, permissions: [FBSDKCoreKit.Permission] = [.publicProfile])
}
extension FBSDKCoreKit.InternalUtility : FBSDKLoginKit.UserInterfaceElementProviding {
}
extension FBSDKCoreKit.InternalUtility : FBSDKLoginKit.UserInterfaceStringProviding {
}
extension FBSDKLoginKit.LoginConfiguration {
  convenience public init?(permissions: Swift.Set<FBSDKCoreKit.Permission> = [], tracking: FBSDKLoginKit.LoginTracking = .enabled, nonce: Swift.String = UUID().uuidString, messengerPageId: Swift.String? = nil, authType: FBSDKLoginKit.LoginAuthType? = .rerequest, codeVerifier: FBSDKLoginKit.CodeVerifier = CodeVerifier())
}
public typealias LoginResultBlock = (FBSDKLoginKit.LoginResult) -> Swift.Void
@frozen public enum LoginResult {
  case success(granted: Swift.Set<FBSDKCoreKit.Permission>, declined: Swift.Set<FBSDKCoreKit.Permission>, token: FBSDKCoreKit.AccessToken?)
  case cancelled
  case failed(Swift.Error)
}
extension FBSDKLoginKit.LoginManager {
  convenience public init(defaultAudience: FBSDKLoginKit.DefaultAudience = .friends)
  public func logIn(permissions: [FBSDKCoreKit.Permission] = [.publicProfile], viewController: UIKit.UIViewController? = nil, completion: FBSDKLoginKit.LoginResultBlock? = nil)
  public func logIn(viewController: UIKit.UIViewController? = nil, configuration: FBSDKLoginKit.LoginConfiguration, completion: @escaping FBSDKLoginKit.LoginResultBlock)
  public func logIn(configuration: FBSDKLoginKit.LoginConfiguration, completion: @escaping FBSDKLoginKit.LoginResultBlock)
}
@objc(FBSDKUserInterfaceElementProviding) public protocol UserInterfaceElementProviding {
  @objc func topMostViewController() -> UIKit.UIViewController?
  @objc(viewControllerForView:) func viewController(for view: UIKit.UIView) -> UIKit.UIViewController?
}
@objc(FBSDKUserInterfaceStringProviding) public protocol UserInterfaceStringProviding {
  @objc var bundleForStrings: Foundation.Bundle { get }
}
